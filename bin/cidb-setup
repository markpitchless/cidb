#!/usr/bin/env ruby
#vim: sw=2 ts=2 sts=2:

require 'cidb'

module CIDB
  class SetupCommand
    include CIDB::Sloppy

    description <<~EOTXT
      Setup a new system. Installs schema in database.
    EOTXT

    def slop(o)
      o.boolean "--drop-tables", "Drop (instead of skipping) existing database tables"
    end

    def main(opts, args)
      CIDB.connect
      load_schema
    end

    def load_schema
      create_table :builds do
        String :build_id, primary_key: true
        String :url
        String :repository
        String :branch
        String :revision
      end

      create_table :test_suites do
        String   :build_id
        String   :name
        primary_key [:build_id, :name]
        DateTime :timestamp
        Integer  :tests,    null: false, default: 0
        Integer  :failures, null: false, default: 0
        Integer  :errors,   null: false, default: 0
        Float    :time,     null: false, default: 0.0
      end

      create_table :test_cases do
        String  :build_id
        String  :suite_name
        String  :classname
        String  :name
        primary_key [:build_id, :suite_name, :classname, :name]
        Float   :time,    null: false, default: 0.0
        Boolean :skipped, null: false, default: false
        Boolean :failed,  null: false, default: false
      end
      info "Setup database schema: " + DB.tables.inspect
    end

    private

    # Wrap DB.create_table with a skip on exists and logging
    # TODO: Log if we dropped, created, skipped etc (or not worry)?
    def create_table(name, &block)
      DB.drop_table? name if @opts.drop_tables?
      DB.create_table? name.to_sym, &block
      info "Setup database table: #{name}"
    end
  end
end

CIDB::SetupCommand.new.run
