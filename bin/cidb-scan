#!/usr/bin/env bash
#vim: sw=2 ts=2 sts=2:

set -e -o pipefail
progname="$(basename "$0")"

info() {
  echo "$progname: $*"
}

export CIDB_BUILD_ID
FORCE=false

usage() {
cat <<EOHELP
USAGE:
  $progname [OPTIONS] [PATH]

OPTIONS:
  PATH        Directory path to scan. Default to current.
  -b BUILD_ID Set build_id to injest against, determined from build otherwise
  -f          Force. Remove existing scan and re-run.
  -h          Show this help.

DESCRIPTION:

Scan the PATHS for files of interest to CIDB. Artifacts we can collect and
logs, junit results we can parse, etc

Injest the files and directories (recursivly) given by PATHS. Files will be
uploaded to the evidence locker and analysis written to the database. All
this is tagged to be part of this build.
EOHELP
  exit 0
}

while getopts ":hfb:" opt; do
  case ${opt} in
    h ) usage
      ;;
    f ) FORCE=true
      ;;
    b) CIDB_BUILD_ID=$OPTARG
      ;;
    \? ) usage
      ;;
  esac
done
shift $((OPTIND -1))

SCAN_DIR="."
if [ -n "$1" ]; then
  SCAN_DIR="$1"
  shift
fi

if [ ! -d "$SCAN_DIR" ]; then
  info Scan directory not found: "$SCAN_DIR"
  exit 10
fi

scan() {
  setup-data
  cidb-data --put build.scan-start-time "$(date +%Y-%m-%dT%H:%M:%S%z)"

  env > "$CIDB_DATA"/env.dump

  scan-builder
  if [[ -z "$CIDB_BUILD_ID" ]]; then
    info "ERROR: CIDB_BUILD_ID not set, can't identify the build"
    cidb-data --put build.scan-end-time "$(date +%Y-%m-%dT%H:%M:%S%z)"
    exit 10
  fi
  cidb-data --put build.build_id "$CIDB_BUILD_ID"

  scan-git-checkout

  # Injest the build data, creating if needed
  cidb-builds --put

  # Find any junit files and parse into csv and insert into db
  cidb-injest-junit

  # Sync to the S3 bucket, do this last, so we collect any files output above
  # Injestors (scanners?) write to cidb/ (CIDB_DATA), either their own files,
  # or using cidb-data. We hover that up at the end.
  # cidb-injest-s3 | cidb-injest-files | cidb-injest-artifacts

  cidb-data --put build.scan-end-time "$(date +%Y-%m-%dT%H:%M:%S%z)"
}

# Setup the data directory, exporting CIDB_DATA with its path
# Exits if the directory exists. Removes first with force (-f)
setup-data() {
  export CIDB_DATA=cidb
  if [ -d "$CIDB_DATA" ]; then
    if [[ $FORCE == true ]]; then
      info Removing existing scan with force
      rm -rf "$CIDB_DATA"
    else
      info Cant scan already scanned directory without force
      exit 11
    fi
  fi
  mkdir -p "$CIDB_DATA"
}

# Work out what ran this build. Run additional scans by type.
scan-builder() {
  export CIDB_BUILDER=general
  if [ -f build.xml ]; then
    CIDB_BUILDER=jenkins-build
  elif [[ -n $JENKINS_HOME ]]; then
    CIDB_BUILDER=jenkins
  elif [[ -n $GITHUB_WORKFLOW ]]; then
    CIDB_BUILDER=github
  fi
  cidb-data --put build.builder "$CIDB_BUILDER"
  info Scanning $CIDB_BUILDER build
  scan-"$CIDB_BUILDER"
}

scan-jenkins-build() {
  info Scanning Jenkins build dir
  info TODO: parse build.xml, set build_id
  if [ -f junitResult.xml ]; then
    info Converting Jenikins result to junit
    junitResult2junit junitResult.xml > junit.xml
  fi
}

# https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables
scan-jenkins() {
  info Scanning Jenkins workspace
  [ -z "$CIDB_BUILD_ID" ] && CIDB_BUILD_ID="$BUILD_URL"
  cidb-data --put build.url "$BUILD_URL"
}

# https://docs.github.com/en/actions/reference/environment-variables
scan-github() {
  info Scanning GitHub Workflow run
  [ -z "$CIDB_BUILD_ID" ] && CIDB_BUILD_ID="$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
  cidb-data --put build.url "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
}

scan-general() {
  info Scanning general build directory
  [ -z "$CIDB_BUILD_ID" ] && CIDB_BUILD_ID="$(hostname):$(pwd)"
  cidb-data --put build.url "$(hostname):$(pwd)"
}

scan-git-checkout() {
  git rev-parse >/dev/null || return 0
  info Scanning git checkout

  GIT_COMMIT="$(git rev-parse HEAD)"
  git rev-parse HEAD > "$CIDB_DATA"/HEAD

  cidb-data --put build.revision "$GIT_COMMIT"
  cidb-data --put build.repository "$(git config remote.origin.url)"
  cidb-data --put build.branch "$(git symbolic-ref HEAD)"
}

info Scanning "$SCAN_DIR"
cd "$SCAN_DIR"
scan
