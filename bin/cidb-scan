#!/usr/bin/env bash
#vim: sw=2 ts=2 sts=2:

set -e -o pipefail
progname="$(basename "$0")"

info() {
  echo "$progname: info: $*"
}

# Log message as fatal and exit 10.
#   fatal "Boom"
# If the first arg is a number, use that exit code.
#   fatal 23 Not enough entropy
fatal() {
  code=10
  if [ -n "$1" ] && [ "$1" -eq "$1" ] 2>/dev/null; then # is number
    code="$1"
    shift
  fi
  echo "$progname: fatal: $*"
  exit "$code"
}

export CIDB_BUILD_ID
FORCE=false

usage() {
cat <<EOHELP
USAGE:
  $progname [OPTIONS] [PATH]

OPTIONS:
  PATH        Directory path to scan. Default to current.
  -b BUILD_ID Set build_id to injest against, determined from build otherwise
  -f          Force. Remove existing scan and re-run.
  -h          Show this help.

DESCRIPTION:

Scan the PATHS for files of interest to CIDB. Artifacts we can collect and
logs, junit results we can parse, etc

Determines the type of build from the environment, deriving a suitable build_id,
exporting CIDB_BUILD_ID. If that doesn't work (ie scanning a local directory)
will fail unless you set CIDB_BUILD_ID or pass an id using -b.

Interesting files will be uploaded to the evidence locker, tagged to be part of
CIDB_BUILD_ID.
EOHELP
  exit 0
}

while getopts ":hfb:" opt; do
  case ${opt} in
    h ) usage
      ;;
    f ) FORCE=true
      ;;
    b) CIDB_BUILD_ID=$OPTARG
      ;;
    \? ) usage
      ;;
    * )
      fatal "Unknown option: ${opt}"
      ;;
  esac
done
shift $((OPTIND -1))

SCAN_DIR="."
if [ -n "$1" ]; then
  SCAN_DIR="$1"
  shift
fi

if [ ! -d "$SCAN_DIR" ]; then
  info Scan directory not found: "$SCAN_DIR"
  exit 10
fi

# The core scan entrypoint, expects to run in the directory to be scanned (after cd).
# Sets up the data store, setting CIDB_DATA. Runs some checks before running
# the main scan and finally runs injest.
# Scanners work with the files in the build site, writing data to files there or
# to CIDB_DATA, ready for injest. ie they run locally and don't talk to S3 or
# the DB.
scan() {
  setup-data
  cidb-data --put scan.start-time "$(date +%Y-%m-%dT%H:%M:%S%z)"

  scan-builder
  if [[ -z "$CIDB_BUILD_ID" ]]; then
    cidb-data --put scan.end-time "$(date +%Y-%m-%dT%H:%M:%S%z)"
    fatal 10 "CIDB_BUILD_ID not set, can't identify the build"
  fi
  cidb-data --put build.build_id "$CIDB_BUILD_ID"

  scan-environment
  scan-git-checkout

  cidb-builds --put # Injest the build data, creating if needed

  injest

  cidb-data --put scan.end-time "$(date +%Y-%m-%dT%H:%M:%S%z)"
}

# Setup the data directory, exporting CIDB_DATA with its path
# Exits if the directory exists. Removes first with force (-f)
setup-data() {
  export CIDB_DATA=cidb
  if [ -d "$CIDB_DATA" ]; then
    if [[ $FORCE == true ]]; then
      info Removing existing scan with force
      rm -rf "$CIDB_DATA"
    else
      fatal Directory already scanned. Use force '(-f)' to re-scan.
    fi
  fi
  mkdir -p "$CIDB_DATA"
}

# Work out what ran this build. Run additional scans by type.
# Exports CIDB_BUILDER
scan-builder() {
  export CIDB_BUILDER=general
  if [ -f build.xml ]; then
    CIDB_BUILDER=jenkins-build
  elif [[ -n $JENKINS_HOME ]]; then
    CIDB_BUILDER=jenkins
  elif [[ -n $GITHUB_WORKFLOW ]]; then
    CIDB_BUILDER=github
  fi
  cidb-data --put build.builder "$CIDB_BUILDER"
  info Scanning "$CIDB_BUILDER" build
  scan-"$CIDB_BUILDER"
}

# Scan a jenkins build directory (ie somewhere in /var/jenkins)
scan-jenkins-build() {
  info Scanning Jenkins build dir
  info TODO: parse build.xml, set build_id
  [ -z "$CIDB_BUILD_ID" ] && CIDB_BUILD_ID="jenkins:$(pwd)"
  if [ -f junitResult.xml ]; then
    info Converting Jenikins result to junit
    junitResult2junit junitResult.xml > junit.xml
  fi
}

# Scan from inside a running jenkins build
# https://www.jenkins.io/doc/book/pipeline/jenkinsfile/#using-environment-variables
scan-jenkins() {
  info Scanning Jenkins workspace
  [ -z "$CIDB_BUILD_ID" ] && CIDB_BUILD_ID="$BUILD_URL"
  cidb-data --put build.builder_url "$BUILD_URL"
}

# Scan from inside a running GitHub Actions workflow
# https://docs.github.com/en/actions/reference/environment-variables
scan-github() {
  info Scanning GitHub Workflow run
  [ -z "$CIDB_BUILD_ID" ] && CIDB_BUILD_ID="github:$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
  cidb-data --put build.builder_url "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
}

scan-general() {
  info Scanning general build directory
  [ -z "$CIDB_BUILD_ID" ] && CIDB_BUILD_ID="$(hostname):$(pwd)"
  cidb-data --put build.builder_url "file://$(hostname)$(pwd)"
}

# Just grab for the whole env for now.
# TODO: This should do some kind of scrubbing, so we don't leak secrets.
scan-environment() {
  env > "$CIDB_DATA"/env.dump
}

scan-git-checkout() {
  git rev-parse >/dev/null || return 0
  info Scanning git checkout

  GIT_COMMIT="$(git rev-parse HEAD)"
  git rev-parse HEAD > "$CIDB_DATA"/HEAD

  cidb-data --put build.revision "$GIT_COMMIT"
  cidb-data --put build.repository "$(git config remote.origin.url)"

  if [ -n "$GITHUB_REF" ]; then
    branch="${GITHUB_REF}"
  else
    branch="$(git symbolic-ref HEAD)"
  fi
  cidb-data --put build.branch "$branch"
}

# Injest happens after all the scanners have run. Injesters fill the database
# and file storage.
# TODO: have this run $PATH/cidb-injest-*
# TODO: make optional, so easier to test scan locally
injest() {
  # Find any junit files and parse into csv and insert into db
  cidb-injest-junit

  # Sync to the S3 bucket, do this last, so we collect any data written or files
  # output by scanners or injestors. Hover up anything we want to keep.
  # cidb-injest-artifacts
}

info Scanning "$SCAN_DIR"
cd "$SCAN_DIR"
scan
