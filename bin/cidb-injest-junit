#!/usr/bin/env ruby
#vim: sw=2 ts=2 sts=2:

require 'cidb'
require 'find'

module CIDB
  module JUnit
    class Command
      include CIDB::Logging
      include CIDB::Sloppy

      banner "USAGE: %{prog} [OPTIONS] [PATH]"

      description <<~EOTXT
        Search PATH (or . if non given ) find all junit files, then injest them
        to the database. Generate CSV files for the store, for easy loading into
        other tools.

        All test data written to the database is linked to the build given by
        CIDB_BUILD_ID (or -b arg), which must be set or the command fails.

        Database access requires CIDB_DATABASE_URL to be set.

        Generally you don't use this directly, it is called as part of the
        scanning process.
      EOTXT

      def slop(opt)
        opt.string "-b", "--build_id", "Build to link test data to. Default: CIDB_BUILD_ID",
          default: ENV['CIDB_BUILD_ID']
        opt.string "--csv-suites", "Where to write test suite .csv output",
          default: "suites.csv"
        opt.string "--csv-cases", "Where to write test case .csv output",
          default: "cases.csv"
      end

      def main(opts, args)
        fail!(10, "No build_id, set CIDB_BUILD_ID or --build_id") unless opts[:build_id]

        CIDB.connect
        dir = args.empty? ? '.' : args[0]
        find_junit(dir).each do |path|
          junit path
          info "Injested junit: #{path.inspect}"
        end
      end

      # Returns an Enumerator for file paths that are junit xml files
      def find_junit(target_dir = '.')
        Enumerator.new do |yielder|
          Find.find(target_dir) do |path|
            next if FileTest.directory?(path) || File.extname(path) != '.xml'
            sax = IsJUnitSax.new
            File.open(path, 'r') { |f| Ox.sax_parse sax, f }
            next unless sax.junit?
            info "Found junit: #{path.inspect}"
            yielder << path
          end
        end
      end

      def junit(path)
        File.open(path, 'r') do |io|
          csv = CSVWriter.new(
            suite_file: @opts[:csv_suites],
            case_file:  @opts[:csv_cases]
          )
          Ox.sax_parse Sax.new(csv), io
        end

        File.open(path, 'r') do |io|
          handler = Sax.new DBWriter.new(@opts[:build_id])
          Ox.sax_parse handler, io
        end
      end
    end
  end
end

CIDB::JUnit::Command.new.run if $0 == __FILE__
