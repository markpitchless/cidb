#!/usr/bin/env ruby
#vim: sw=2 ts=2 sts=2:

require 'cidb'
require 'find'

module CIDB
  module JUnit
    # Detect if the file is a junit xml file. Kind of ikky, but it works for now.
    # TODO: just merge into the Parser and throw a NotJUnitError?
    #   IsJUnitSax.new.junit?(path)
    class IsJUnitSax < ::Ox::Sax
      def junit?(path)
        @is_junit = false
        File.open(path, 'r') { |f| Ox.sax_parse self, f }
        @is_junit
      end

      def start_element(name)
        if name == :testsuites
          @is_junit = true # TODO: can we short circuit the parse at this point?
        end
      end
    end

    class Command
      include CIDB::Logging
      include CIDB::Sloppy

      banner "USAGE: %{prog} [OPTIONS] [PATH]"

      description <<~EOTXT
        Search PATH (or . if non given ) find all junit files, then injest them
        to the database. Generate CSV files for the store, for easy loading into
        other tools.

        All test data written to the database is linked to the build given by
        CIDB_BUILD_ID (or -b arg), which must be set or the command fails.

        Database access requires CIDB_DATABASE_URL to be set.

        Generally you don't use this directly, it is called as part of the
        scanning process.
      EOTXT

      def slop(opt)
        data_dir = ENV['CIDB_DATA'] || '.'
        opt.string "-b", "--build_id", "Build to link test data to. Default: CIDB_BUILD_ID",
          default: ENV['CIDB_BUILD_ID']
        opt.string "--csv-suites", "Where to write test suite .csv output",
          default: File.join(data_dir, "suites.csv")
        opt.string "--csv-cases", "Where to write test case .csv output",
          default: File.join(data_dir, "cases.csv")
      end

      def main(opts, args)
        fail!(10, "No build_id, set CIDB_BUILD_ID or --build_id") unless opts[:build_id]
        dir = args.empty? ? '.' : args[0]

        CIDB.connect
        find_junit(dir).each do |path|
          junit path
          info "Injested junit: #{path.inspect}"
        end
      end

      # Returns an Enumerator for file paths that are junit xml files
      def find_junit(target_dir = '.')
        Enumerator.new do |yielder|
          Find.find(target_dir) do |path|
            next if FileTest.directory?(path) || File.extname(path) != '.xml'
            next unless IsJUnitSax.new.junit?(path)
            info "Found junit: #{path.inspect}"
            yielder << path
          end
        end
      end

      def junit(path)
        File.open(path, 'r') do |io|
          Parser.new( DBWriter.new(@opts[:build_id]) ).parse(io)
        end

        File.open(path, 'r') do |io|
          csv = CSVWriter.new(
            suite_file: @opts[:csv_suites],
            case_file:  @opts[:csv_cases]
          )
          Parser.new(csv).parse(io)
        end
      rescue Sequel::Error => err
        fail! 12, "Database error: #{err.class}: #{err}"
      end
    end
  end
end

CIDB::JUnit::Command.new.run if $0 == __FILE__
